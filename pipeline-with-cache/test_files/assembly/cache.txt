# cache test

# there are 4 aspects in a cache:
# 1.read/write cache
# 2.save dirty block
# 3.replace block
# 4.replacement policy(specifically test this in LRU.txt/LRU.dat)

# there are 3 kinds of condition to test:
# 1.hit: read/write cache
# 2.not hit & clean: replace -> read/write
# 3.not hit & dirty: save -> replace -> read/write

# if read/write are consider 2 kinds of condition, 
# then there are 6 kinds in total

# in this program:
# 1.sw 0~127 into address 0~127*4
# 2.lw 0~127 from address 0~127*4, and accumulate
# 3.result is $1 = 8128 = 0x1fc0
#   (then all the possible conditions are tested)
 

#		Assembly			Description				Address		Machine		Binary

# main
main:	addi $10,$0,0		# count					0			200A0000
		addi $11,$0,0 		# address				4			200B0000
		addi $12,$0,0 		# temp					8			200C0000
		addi $13,$0,128		# length				c			200D0080
		
swloop:	sw 	 $10,0($11)		# [addr] = count		10			AD6A0000
		addi $10,$10,1		# count += 1			14			214A0001
		addi $11,$11,4		# addr += 4				18			216B0004
		bne  $10,$13,swloop # if count!=length jump	1c			154DFFFC

		addi $10,$0,0 		# count					20			200A0000
		addi $11,$0,0 		# address				24			200B0000
		addi $12,$0,0 		# temp					28			200C0000
		addi $13,$0,128		# length				2c			200D0080
		addi $1,$0,0		# sum					30			20010000
		
lwloop:	lw 	 $12,0($11)		# temp = [addr]			34			8D6C0000
		add  $1,$1,$12		# sum += temp			38			002C0820
		addi $10,$10,1		# count += 1			3c			214A0001
		addi $11,$11,4		# addr +=4				40			216B0004
		bne  $10,$13,lwloop # if count!=length jump	44			154DFFFB

