#		Assembly			Description						Address		Machine		Binary
main:	addi $2, $0, 5		# initialize $2 = 5				0			20020005
		ori  $3, $0, 12		# initialize $3 = 12 			4			3403000c
		xori $7, $3, 15		# initialize $7 = 3				8			3867000f
		or	 $4, $7, $2		# $4 = (3 OR 5) = 7				c			00e22025
		and	 $5, $3, $4		# $5 = (12 AND 7) = 4			10			00642824
		add	 $5, $5, $4		# $5 = 4 + 7 = 11				14			00a42820
		beq	 $5, $7, end	# shouldn't be taken			18			10a7000a
		slti $4, $3, 7		# $4 = 12 < 7 = 0				1c			28640007
		beq	 $4, $0, around	# should be taken				20			10800001
		addi $5, $0, 0		# shouldn't happen				24			20050000
around: slt  $4, $7, $2		# $4 = 3 < 5 = 1				28			00e2202a
		andi $7, $3, 15		# $7 = 12 & 15 = 12				2c			3067000f
		sub  $7, $7, $2		# $7 = 12 - 5 = 7				30			00e23822
		sw	 $7, 148($3)	# [160] = 7						34			ac670094
		lw	 $2, 160($0)	# $2 = [160] = 7				38			8c0200a0	
		j	 end 			# should be taken 				3c			08000011
		addi $2, $0, 1		# shouldn't be taken 			40			20020001
end:	sll	 $9, $2, 29		# $9 = 7 << 29 = e0...0			44			00024f40
		nop					# no operation					48			00000000
		bne	 $2, $3, skip	# should be taken				4c			14a70001
		sw	 $4, 161($2)	# not write mem[168] = 1		50			ac4400a1
skip:	sra	 $4, $9, 29		# $4 = e0...0 >> 29 = f...f		54			00092743
		jal	 jtest			# should be taken				58			0c000018
		addi $2, $0, 5		# shouldn't be taken			5c			20020005
jtest	xor	 $8, $2, $3		# $8 = 7 ^ 12 = 11				60			00434026
		nor	 $1, $3, $2		# $1 = ~(12 | 7) = f...f0 		64			00620827
		srl	 $5, $9, 29		# $5 = e0...0 >> 29 = 7			68			00092f42 
		lui	 $3, ffff		# $3 = ffff0000					6c			3c03ffff	001111 00000 00011 1111 1111 1111 1111
		
# instr: addi, and, or, add, sub, beq, slt, sw, lw, j, andi, ori, slti, nop, bne, xor, xori, nor, sll, srl, sra, jal, lui

# add instr: jal, lui
# add alusrca, more input choice for alu-a
# widen alusrc, and change name into alusrcb, more input choices for alu-b
# widen regdst, more input choices for writereg
# add an operation of (x << 16) in ALU, for LUI